{"version":3,"sources":["components/Button.js","api/constants.js","api/tasks.js","components/NewTask.js","api/operations.js","components/Operation.js","components/Operations.js","components/Task.js","App.js","index.js"],"names":["Button","_ref","children","_ref$color","color","_ref$className","className","_ref$small","small","_ref$outline","outline","icon","onClick","btnClasses","concat","filter","Boolean","join","iconClasses","undefined","react_default","a","createElement","type","API_URL","getTasks","localStorage","getItem","successCallback","fetch","headers","Authorization","then","r","json","data","error","catch","err","console","log","createTask","task","Content-Type","method","body","JSON","stringify","updateTask","id","removeTask","NewTask","onNewTask","_useState","useState","_useState2","Object","slicedToArray","title","setTitle","_useState3","_useState4","description","setDescription","onSubmit","e","preventDefault","status","name","placeholder","value","onChange","target","components_Button","getOperations","createOperation","operation","updateOperation","removeOperation","Operation","onRemoveOperation","_timeSpent","timeSpent","timeSpentForm","setTimeSpentForm","setTimeSpent","_useState5","_useState6","timeSpentInput","setTimeSpentInput","hours","Math","floor","minutes","isNaN","parseInt","style","width","Operations","taskID","form","setForm","operations","setOperations","operationDescription","setOperationDescription","handleRemoveOperation","prevState","Fragment","toConsumableArray","map","components_Operation","assign","key","Task","_status","onRemoveTask","setStatus","operationForm","setOperationForm","useEffect","length","components_Operations","App","tasks","setTasks","handleRemoveTask","components_NewTask","prevTasks","components_Task","Root","loading","setLoading","apiKeyGenerate","_ref2","asyncToGenerator","regenerator_default","mark","_callee","apiRequest","apiKey","wrap","_context","prev","next","sent","setItem","stop","apply","this","arguments","rootElement","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1a6df4eb.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Button({\n  children,\n  color = \"primary\",\n  className = false,\n  small = false,\n  outline = false,\n  icon,\n  onClick\n}) {\n  const btnClasses = [\n    \"btn\",\n    outline ? `btn-outline-${color}` : `btn-${color}`,\n    small && \"btn-sm\",\n    className\n  ]\n    .filter(Boolean)\n    .join(\" \");\n\n  const iconClasses = [icon, children !== undefined && \"ml-1\"]\n    .filter(Boolean)\n    .join(\" \");\n\n  return (\n    <button className={btnClasses} type=\"submit\" onClick={onClick}>\n      {children}\n      {icon && <i className={iconClasses} />}\n    </button>\n  );\n}\n\nexport default Button;\n","export const API_URL = \"https://todo-api.coderslab.pl/api\";\nexport const API_KEY = localStorage.getItem(\"API_KEY\");\n","import { API_URL } from \"./constants\";\n\n/**\n * Fetch all tasks\n * @param {function} successCallback - Function that saves incoming data\n */\nexport const getTasks = successCallback => {\n  fetch(`${API_URL}/tasks`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\")\n    }\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback(data.data);\n      }\n    })\n    .catch(err => console.log(err));\n};\n\n/**\n * Save task (create or update)\n * @param {Object} task - Complete object with task details\n * @param {string} task.title - Task title\n * @param {string} task.description - Task description\n * @param {string} task.status - Task status (open/closed)\n * @param {function} successCallback - Function that saves incoming data\n */\nexport const createTask = (task, successCallback) => {\n  fetch(`${API_URL}/tasks`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\"),\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify(task)\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback(data.data);\n      }\n    })\n    .catch(err => console.log(err));\n};\n\n/**\n * Update task\n * @param {string} id - ID of task\n * @param {Object} task - Complete object with task details\n * @param {string} task.title - Task title\n * @param {string} task.description - Task description\n * @param {string} task.status - Task status (open/closed)\n * @param {function} successCallback - Function that saves incoming data\n */\nexport const updateTask = (id, task, successCallback) => {\n  fetch(`${API_URL}/tasks/${id}`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\"),\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"PUT\",\n    body: JSON.stringify(task)\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback(data.data);\n      }\n    })\n    .catch(err => console.log(err));\n};\n\n/**\n * Remove task\n * @param {string} id - ID of task\n * @param {function} successCallback - Function runs in success case\n */\nexport const removeTask = (id, successCallback) => {\n  fetch(`${API_URL}/tasks/${id}`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\")\n    },\n    method: \"DELETE\"\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback();\n      }\n    })\n    .catch(err => console.log(err));\n};\n","import React, { useState } from \"react\";\nimport Button from \"./Button\";\nimport { createTask } from \"../api/tasks\";\n\nfunction NewTask({ onNewTask }) {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  /**\n   * Create new task\n   * @param {Object} e - Event object\n   */\n  const handleAddTask = e => {\n    e.preventDefault();\n\n    const task = {\n      title,\n      description,\n      status: \"open\"\n    };\n\n    /**\n     * @function createTask - API function\n     */\n    createTask(task, onNewTask);\n  };\n\n  return (\n    <div className=\"card shadow\">\n      <div className=\"card-body\">\n        <h1 className=\"card-title\">New task</h1>\n        <form onSubmit={handleAddTask}>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"title\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={e => setTitle(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name=\"description\"\n              placeholder=\"Description\"\n              value={description}\n              onChange={e => setDescription(e.target.value)}\n            />\n          </div>\n          <Button color={\"info\"} icon={\"fas fa-plus-circle\"}>\n            Add task\n          </Button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default NewTask;\n","import { API_URL } from \"./constants\";\n\n/**\n * Fetch all operations\n * @param {string} id - ID of task\n * @param {function} successCallback - Function that saves incoming data\n */\nexport const getOperations = (id, successCallback) => {\n  fetch(`${API_URL}/tasks/${id}/operations`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\")\n    }\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback(data.data);\n      }\n    })\n    .catch(err => console.log(err));\n};\n\n/**\n * Create operation\n * @param {string} id - ID of task\n * @param {Object} operation - Complete object with operation details\n * @param {string} operation.description - Operation description\n * @param {number} operation.timeSpent - Operation time spent value\n * @param {function} successCallback - Function that saves incoming data\n */\nexport const createOperation = (id, operation, successCallback) => {\n  fetch(`${API_URL}/tasks/${id}/operations`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\"),\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: JSON.stringify(operation)\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback(data.data);\n      }\n    })\n    .catch(err => console.log(err));\n};\n\n/**\n * Update operation (create or update)\n * @param {string} id - ID of operation\n * @param {Object} operation - Complete object with operation details\n * @param {string} operation.description - Operation description\n * @param {number} operation.timeSpent - Operation time spent value\n * @param {function} successCallback - Function that saves incoming data\n */\nexport const updateOperation = (id, operation, successCallback) => {\n  fetch(`${API_URL}/operations/${id}`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\"),\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"PUT\",\n    body: JSON.stringify(operation)\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback(data.data);\n      }\n    })\n    .catch(err => console.log(err));\n};\n\n/**\n * Remove operation\n * @param {string} id - ID of operation\n * @param {function} successCallback - Function that is run in success case\n */\nexport const removeOperation = (id, successCallback) => {\n  fetch(`${API_URL}/operations/${id}`, {\n    headers: {\n      Authorization: localStorage.getItem(\"API_KEY\")\n    },\n    method: \"DELETE\"\n  })\n    .then(r => r.json())\n    .then(data => {\n      if (data.error === false && typeof successCallback === \"function\") {\n        successCallback();\n      }\n    })\n    .catch(err => console.log(err));\n};\n","import React, { useState } from \"react\";\nimport { removeOperation, updateOperation } from \"../api/operations\";\nimport Button from \"./Button\";\n\nfunction Operation({\n  description,\n  id,\n  onRemoveOperation,\n  timeSpent: _timeSpent,\n  status\n}) {\n  const [timeSpentForm, setTimeSpentForm] = useState(false);\n  const [timeSpent, setTimeSpent] = useState(_timeSpent);\n  const [timeSpentInput, setTimeSpentInput] = useState(\"\");\n\n  /**\n   * Update operation and save new time\n   * @param {Object} e - Event object\n   */\n  const handleTimeSave = e => {\n    e.preventDefault();\n\n    // Validate input (number > 0)\n    if (isNaN(parseInt(timeSpentInput)) || timeSpentInput < 0) {\n      return;\n    }\n\n    const operation = {\n      description,\n      timeSpent: parseInt(timeSpent) + parseInt(timeSpentInput)\n    };\n\n    /**\n     * @function updateOperation - API function\n     */\n    updateOperation(id, operation, data => {\n      // Update local time spent state\n      setTimeSpent(data.timeSpent);\n\n      // Hide form\n      setTimeSpentForm(false);\n    });\n  };\n\n  /**\n   * Remove single operation from DB and local state\n   */\n  const handleRemove = () => {\n    /**\n     * @function removeOperation - API function\n     */\n    removeOperation(id, () => {\n      /**\n       * @function onRemoveOperation - Function from parent component passed by props\n       * Function is updating local state\n       */\n      onRemoveOperation(id);\n    });\n  };\n\n  const hours = Math.floor(timeSpent / 60);\n  const minutes = timeSpent % 60;\n\n  return (\n    <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n      <div>\n        {description}\n        {timeSpent > 0 && (\n          <span className=\"badge badge-success badge-pill ml-2\">\n            {hours}h {minutes}m\n          </span>\n        )}\n      </div>\n\n      {timeSpentForm && (\n        <form onSubmit={handleTimeSave}>\n          <div className=\"input-group input-group-sm\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              placeholder=\"Spent time in minutes\"\n              value={timeSpentInput}\n              style={{ width: \"12rem\" }}\n              onChange={e => setTimeSpentInput(e.target.value)}\n            />\n            <div className=\"input-group-append\">\n              <Button color={\"success\"} outline icon={\"fas fa-save\"} />\n              <Button\n                color={\"dark\"}\n                outline\n                icon={\"fas fa-times\"}\n                onClick={() => setTimeSpentForm(false)}\n              />\n            </div>\n          </div>\n        </form>\n      )}\n\n      {!timeSpentForm && (\n        <div>\n          {status === \"open\" && (\n            <Button\n              icon={\"fas fa-clock\"}\n              color={\"success\"}\n              outline\n              small\n              className={\"mr-2\"}\n              onClick={() => setTimeSpentForm(true)}\n            >\n              Add time\n            </Button>\n          )}\n          <Button\n            icon={\"fas fa-trash\"}\n            color={\"danger\"}\n            outline\n            small\n            onClick={handleRemove}\n          />\n        </div>\n      )}\n    </li>\n  );\n}\n\nexport default Operation;\n","import React, { useState } from \"react\";\nimport Operation from \"./Operation\";\nimport { createOperation } from \"../api/operations\";\nimport Button from \"./Button\";\n\nfunction Operations({\n  taskID,\n  form,\n  setForm,\n  operations,\n  setOperations,\n  status\n}) {\n  const [operationDescription, setOperationDescription] = useState(\"\");\n\n  /**\n   * Create new operation in this task\n   * @param {Object} e - Event object\n   */\n  const handleNewOperation = e => {\n    e.preventDefault();\n\n    const operation = {\n      description: operationDescription,\n      timeSpent: 0\n    };\n\n    /**\n     * @function createOperation - API function\n     */\n    createOperation(taskID, operation, data => {\n      /**\n       * @function setOperations - update local state\n       */\n      setOperations(prevState => {\n        return [data, ...prevState];\n      });\n\n      // Hide new operation form\n      setForm(false);\n\n      // Reset operation form input\n      setOperationDescription(\"\");\n    });\n  };\n\n  /**\n   * Remove operation from local state\n   * @param {string} id - ID of operation to remove\n   */\n  const handleRemoveOperation = id => {\n    setOperations(prevState =>\n      prevState.filter(operation => operation.id !== id)\n    );\n  };\n\n  return (\n    <>\n      {form && (\n        <div className=\"card-body\">\n          <form onSubmit={handleNewOperation}>\n            <div className=\"input-group\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Operation description\"\n                value={operationDescription}\n                onChange={e => setOperationDescription(e.target.value)}\n              />\n\n              <div className=\"input-group-append\">\n                <Button color={\"info\"} icon=\"fas fa-plus-circle\">\n                  Add\n                </Button>\n              </div>\n            </div>\n          </form>\n        </div>\n      )}\n\n      <ul className=\"list-group list-group-flush\">\n        {operations.map(operation => (\n          <Operation\n            key={operation.id}\n            {...operation}\n            onRemoveOperation={handleRemoveOperation}\n            status={status}\n          />\n        ))}\n      </ul>\n    </>\n  );\n}\n\nexport default Operations;\n","import React, { useState, useEffect } from \"react\";\nimport Operations from \"./Operations\";\nimport Button from \"./Button\";\nimport { removeTask, updateTask } from \"../api/tasks\";\nimport { getOperations } from \"../api/operations\";\n\nfunction Task({ title, description, id, status: _status, onRemoveTask }) {\n  const [status, setStatus] = useState(_status);\n  const [operations, setOperations] = useState([]);\n  const [operationForm, setOperationForm] = useState(false);\n\n  useEffect(() => {\n    /**\n     * After component mount fetch all operation in this task\n     * @function getOperations - API function\n     */\n    getOperations(id, setOperations);\n  }, []);\n\n  /**\n   * Show/Hide add new operation form\n   */\n  const toggleOperationForm = () => {\n    setOperationForm(prevState => !prevState);\n  };\n\n  /**\n   * Update task and set status to \"finish\"\n   */\n  const handleFinish = () => {\n    const task = {\n      title,\n      description,\n      status: \"closed\"\n    };\n\n    /**\n     * @function updateTask - API function\n     */\n    updateTask(id, task, () => {\n      setStatus(\"closed\");\n    });\n  };\n\n  /**\n   * Remove single task from DB and local state\n   */\n  const handleRemove = () => {\n    /**\n     * @function removeTask - API function\n     */\n    removeTask(id, () => {\n      /**\n       * @function onRemoveTask - Function from parent component passed by props\n       * Function is updating local state\n       */\n      onRemoveTask(id);\n    });\n  };\n\n  return (\n    <section className=\"card mt-5 shadow-sm\">\n      <div className=\"card-header d-flex justify-content-between align-items-center\">\n        <div>\n          <h5>{title}</h5>\n          <h6 className=\"card-subtitle text-muted\">{description}</h6>\n        </div>\n\n        <div>\n          {status === \"open\" && (\n            <>\n              <Button\n                icon=\"fas fa-plus-circle\"\n                color=\"info\"\n                small\n                onClick={toggleOperationForm}\n                className=\"mr-2\"\n              >\n                Add operation\n              </Button>\n\n              <Button\n                icon=\"fas fa-archive\"\n                color=\"dark\"\n                small\n                onClick={handleFinish}\n              >\n                Finish\n              </Button>\n            </>\n          )}\n          {operations.length === 0 && (\n            <Button\n              icon={\"fas fa-trash\"}\n              color={\"danger\"}\n              outline\n              small\n              onClick={handleRemove}\n              className=\"ml-2\"\n            />\n          )}\n        </div>\n      </div>\n\n      <Operations\n        taskID={id}\n        form={operationForm}\n        setForm={setOperationForm}\n        operations={operations}\n        setOperations={setOperations}\n        status={status}\n      />\n    </section>\n  );\n}\n\nexport default Task;\n","import React, { useState, useEffect } from \"react\";\nimport NewTask from \"./components/NewTask\";\nimport Task from \"./components/Task\";\nimport { getTasks } from \"./api/tasks\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    /**\n     * After component mount fetch all tasks from API\n     * @function getTasks - API function\n     */\n    getTasks(setTasks);\n  }, []);\n\n  /**\n   * Add new task local state\n   * @param {Object} task - Complete object with task details\n   * @param {string} task.title - Task title\n   * @param {string} task.description - Task description\n   * @param {string} task.status - Task status (open/closed)\n   */\n  const handleAddNewTask = task => {\n    setTasks(prevTasks => {\n      return [task, ...prevTasks];\n    });\n  };\n\n  /**\n   * Remove task from local state\n   * @param {string} id - ID of task\n   */\n  const handleRemoveTask = id => {\n    setTasks(prevState => prevState.filter(task => task.id !== id));\n  };\n\n  return (\n    <>\n      <NewTask onNewTask={handleAddNewTask} />\n\n      {tasks.map(task => {\n        return <Task key={task.id} {...task} onRemoveTask={handleRemoveTask} />;\n      })}\n    </>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nfunction Root({ children }) {\n  const [loading, setLoading] = useState(true);\n\n  const apiKeyGenerate = async () => {\n    if (localStorage.getItem(\"API_KEY\") === null) {\n      const apiRequest = await fetch(\n        \"https://todo-api.coderslab.pl/apikey/create\"\n      );\n      const apiKey = await apiRequest.json();\n\n      localStorage.setItem(\"API_KEY\", apiKey.data.apiKey);\n      setLoading(false);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    apiKeyGenerate();\n  }, []);\n\n  if (loading) {\n    return <h1>Loading...</h1>;\n  }\n\n  return children;\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <Root>\n      <App />\n    </Root>\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}